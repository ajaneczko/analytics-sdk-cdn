/**
 * Analytics SDK - Browser Ready
 * Usage: <script src="https://your-domain.com/analytics.min.js"></script>
 * Then: window.Analytics.init({ endpoint: '...', siteId: '...' })
 */
(function (window) {
  "use strict";

  class AnalyticsSDK {
    constructor(config) {
      this.endpoint = config.endpoint;
      this.siteId = config.siteId;
      this.ingestionKey = config.ingestionKey;
      this.debug = config.debug || false;
      this.batchSize = config.batchSize || 10;
      this.flushInterval = config.flushInterval || 5000;

      this.clientId = this.getOrCreateClientId();
      this.sessionId = this.generateId();
      this.userId = null;
      this.userProps = null;
      this.events = [];

      if (typeof window !== "undefined") {
        this.intervalId = setInterval(() => this.flush(), this.flushInterval);
        window.addEventListener("beforeunload", () => this.flush());
        this.trackPageView({ autoTracked: true });
      }

      this.log("Analytics SDK initialized");
    }

    trackPageView(props = {}) {
      this.events.push({
        type: "page_view",
        url: window.location.href,
        path: window.location.pathname,
        title: document.title,
        referrer: document.referrer || undefined,
        utm: this.extractUTM(),
        props: props,
        ts: Date.now(),
      });

      this.log("Page view tracked");
      if (this.events.length >= this.batchSize) this.flush();
      return this;
    }

    track(eventName, props = {}) {
      this.events.push({
        type: "event",
        name: eventName,
        props: props,
        ts: Date.now(),
      });

      this.log("Event tracked: " + eventName);
      if (this.events.length >= this.batchSize) this.flush();
      return this;
    }

    setUserId(userId) {
      this.userId = userId;
      this.log("User ID set: " + userId);
      return this;
    }

    setUserProps(props) {
      this.userProps = Object.assign({}, this.userProps, props);
      this.log("User props updated");
      return this;
    }

    flush() {
      if (this.events.length === 0) return Promise.resolve();

      const events = this.events.slice();
      this.events = [];

      const payload = {
        site_id: this.siteId,
        client_ts: Date.now(),
        client_id: this.clientId,
        session_id: this.sessionId,
        events: events,
      };

      // Only add user_id and user_props if they exist (don't send null)
      if (this.userId) payload.user_id = this.userId;
      if (this.userProps) payload.user_props = this.userProps;

      const headers = { "Content-Type": "application/json" };
      if (this.ingestionKey) {
        headers["x-ingestion-key"] = this.ingestionKey;
      }

      return fetch(this.endpoint + "/collect", {
        method: "POST",
        headers: headers,
        body: JSON.stringify(payload),
      })
        .then((response) => {
          if (!response.ok) {
            return response
              .json()
              .then((errData) => {
                console.error("[Analytics] Validation error:", errData);
                console.error("[Analytics] Failed payload:", payload);
                throw new Error(
                  "HTTP " + response.status + ": " + JSON.stringify(errData)
                );
              })
              .catch(() => {
                throw new Error("HTTP " + response.status);
              });
          }
          this.log("âœ… Sent " + events.length + " events");
          return response.json();
        })
        .catch((error) => {
          console.error("[Analytics] Failed to send events:", error);
          this.events = events.concat(this.events);
        });
    }

    destroy() {
      if (this.intervalId) clearInterval(this.intervalId);
      this.flush();
    }

    getOrCreateClientId() {
      const key = "analytics_client_id";
      let id = localStorage.getItem(key);
      if (!id) {
        id = this.generateId();
        localStorage.setItem(key, id);
      }
      return id;
    }

    generateId() {
      return Date.now() + "_" + Math.random().toString(36).substring(2, 11);
    }

    extractUTM() {
      const params = new URLSearchParams(window.location.search);
      const utm = {};
      ["source", "medium", "campaign", "term", "content"].forEach(function (
        key
      ) {
        const value = params.get("utm_" + key);
        if (value) utm[key] = value;
      });
      return Object.keys(utm).length > 0 ? utm : undefined;
    }

    log(msg) {
      if (this.debug) console.log("[Analytics] " + msg);
    }
  }

  // Global API
  window.Analytics = {
    instance: null,

    init: function (config) {
      this.instance = new AnalyticsSDK(config);
      return this.instance;
    },

    trackPageView: function (props) {
      if (!this.instance) {
        console.warn(
          "[Analytics] Not initialized. Call Analytics.init() first."
        );
        return;
      }
      return this.instance.trackPageView(props);
    },

    track: function (eventName, props) {
      if (!this.instance) {
        console.warn(
          "[Analytics] Not initialized. Call Analytics.init() first."
        );
        return;
      }
      return this.instance.track(eventName, props);
    },

    setUserId: function (userId) {
      if (!this.instance) {
        console.warn(
          "[Analytics] Not initialized. Call Analytics.init() first."
        );
        return;
      }
      return this.instance.setUserId(userId);
    },

    setUserProps: function (props) {
      if (!this.instance) {
        console.warn(
          "[Analytics] Not initialized. Call Analytics.init() first."
        );
        return;
      }
      return this.instance.setUserProps(props);
    },

    flush: function () {
      if (!this.instance) return Promise.resolve();
      return this.instance.flush();
    },
  };
})(window);
